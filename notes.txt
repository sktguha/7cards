 
function setupName(){
  check ls.name. if name present return promise
  else take input. then make request api/is-match?name=
  if request returns match. 
  warn about login. 
	if select yes. then set ls and 
  make request to api/add-player and add to players array in server
  else call setupname
}


have a set of players as players array and add to it
const players = [];

<button onclick="startNewGame()">restart game/ start new game. </button>

function startNewGame(){
 take no of cards per player(default as 7) as input. then call api/get-all-players, then select
 which players in game from list will play as csv(enter 0 to select all)
 then make call as api/start-new-game?cards=7&playerList=1,3,4
}

log()=>{
  line = Date.now()+" : "+[...arguments].join(",")
  logs.push(line);
}
undoLastTurn()=>{
  //have to remove from either deck or underdeck
}
pullCard(name)=>{
  card = takeCardFromDeck();
  addCardToPlayerHand(name, card);
}
takeCardFromDeck(){
  if(deck.length === 0 ){
    deck = [shuffle underDeck];
    underDeck = [];
  }
  return deck.unshift();
}
addCardToPlayerHand(name, card){ 
  list = cards[name]
  list.push(card);
  sort list by suits then numbers
  cards[name]=list;
}
incrementIndex(){
  currIndex = currIndex === currPlayers.length - 1 ? 0: currIndex+1;
}

"api/start-new-game", function(){
 set deck = [yates-fischer shuffle initial-deck]
 set underDeck = [];
 set currTurn = 0;
 set currPlayers as shuffle from the req.playerList from players
 set cards[...currPlayers]= [req.noOfCards] as drawn randomly from the deck
 set turnHistory = []; { action:'place', cards: [], playerName: 'name'} or { action:'draw-two', cards:[], playerName:'name'} or { action:'draw-one', cards:[], playerName:'name'}
  set topcard = "";
}

//keep invariant check of deck+underdeck+topcard+all player hands = full deck??

"api/play-turn", function(){
  if(name !== currPlayers[currIndex]) {
	log('play turn call ignored as not curr player', name, currPlayers[currIndex]);
	return;
  }
  if(place){
    underDeck.push(topCard);
    turnHistory.push(obj)
    log(name, 'played turn ', obj.action. ' card = ', cards[name][cardNoToPlace]));
    cardToPlace = cards[name][cardNoToPlace];
    removeCardFromPlayerHand(name , cardToPlace);
    topcard = cardToPlace;
    
    if(order){
	incrementIndex();
	const nextPlayer = currPlayers[currIndex];
      if(order===1){
         const cardToGive = cards[name][cardNoToGive];
	   addCardToPlayerHand(nextPlayer, cardToGive);
	   log(nextPlayer,' gave ',cardToGive,' to ', name, ' by order');
	}
	if(order === 2){
         log(nextPlayer,' ordered to pull two cards by', name);	   
	   pullCard(currPlayers[currIndex])
	   pullCard(currPlayers[currIndex])
	}
    } else if(pull one){
      pullCard(currPlayers[currIndex])
    } else if(pull two){
      pullCard(currPlayers[currIndex])
      pullCard(currPlayers[currIndex])
    }
    
    incrementIndex();
    log('current turn of ', currPlayers[currIndex])
  } 
  
}



function init(){
  setInterval(()=>{
    "api/refresh-data?name=ls.name.then(
	settopcard
	rendercardCachedImage(cards)
	currIndex
      currPlayers
	if(currPlayers[currIndex] === ls.name)
	 enable play-turn div
		window.prompt('1.place card 2. pull one 3. pull two')
	      if(place === 'j') select 1. give your card 2. order to pick two
   		api/play-turn?actionType=1&cardNoToPlace=3&order=1&cardNoToGive=4 or no=2 or no=3	 highlight name
	)
  }, 500)

}

<button onclick="undoLastTurn()">undo last turn</button>
 
logs are refreshed blindly by setInterval of 1 sec. logs.push
chats are refreshed blindly by setInterval of 1 sec. logs.push

